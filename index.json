[{"authors":["admin"],"categories":null,"content":"I'm currently working on decision making and prediction for autonomous driving at the Toyota Research Institute. I previously completed a master\u0026rsquo;s degree in computer science at Stanford, where I focused on reinforcement learning and decision making as part of the Stanford Intelligent Systems Laboratory advised by Mykel Kochenderfer.\nDuring my master\u0026rsquo;s, I interned at Adobe Research where I was advised by Hung Bui. We performed research around imitation learning and its applications in artistic domains.\nAs an undergraduate student I studied computer science at Vanderbilt University, where I performed autonomous UAV research with my advisor Julie Adams as part of the Human-Machine Teaming Lab. I also worked with Eugene Vorobeychik on a project dealing with social interaction analysis, which is how I originally became interested in machine learning.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://wulfebw.github.io/author/blake-wulfe/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/blake-wulfe/","section":"authors","summary":"I'm currently working on decision making and prediction for autonomous driving at the Toyota Research Institute. I previously completed a master\u0026rsquo;s degree in computer science at Stanford, where I focused on reinforcement learning and decision making as part of the Stanford Intelligent Systems Laboratory advised by Mykel Kochenderfer.","tags":null,"title":"Blake Wulfe","type":"authors"},{"authors":["Blake Wulfe","Ashwin Balakrishna","Logan Ellis","Jean Mercat","Rowan McAllister","Adrien Gaidon"],"categories":["reward learning","irl","rl","imitation learning"],"content":"","date":1643068800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643068800,"objectID":"28472646a894a9e3df7e2e4fa70840c4","permalink":"https://wulfebw.github.io/publication/dard/","publishdate":"2020-05-19T22:14:02-07:00","relpermalink":"/publication/dard/","section":"publication","summary":"We propose a method for quantifying the similarity of learned reward functions without performing policy learning and evaluation.","tags":[],"title":"Dynamics-Aware Comparison of Learned Reward Functions","type":"publication"},{"authors":[],"categories":["reinforcement learning"],"content":"Introduction  I participated in the NeurIPS 2020 Procgen Challenge with my colleague, Adrien Gaidon, and ended up winning the competition (1st place in the sample efficiency track, 2nd place in the generalization track). This post describes the process I followed, the methods I tried, and lessons learned from the competition. Here\u0026rsquo;s a brief video giving an overview:    Background  The competition evaluates reinforcement learning agents on the Procgen environments.  There are two tracks:  Sample efficiency: For each env, train and evaluate on the full distribution of levels. Generalization: For each env, train on 200 levels, and evaluate on the full distribution.   Participants submit code to train agents. Agents are trained for each environment, and the scores across environments are aggregated to get the final score.  The final evaluation is on 16 public environments (this counted for half the score), and 4 private environments (the other half of the weight in the score). The agents only have 8 million steps in the environments during training, and can only run training for at most 2 hours      Process For deciding which method to try next This is basically \u0026ldquo;use the scientific method\u0026rdquo;, but there are a couple aspects specific to RL:\n Evaluate the performance of the current best approach  Plotting learning curves on train / evaluation levels Visualizing the policy at different points during training  Watch the policy and try to understand why it doesn\u0026rsquo;t perform better / where it gets stuck / killed     List all the reasons the agent might be performing suboptimally in a given environment or across environments  See Appendix 1 for an outline of reasons This often involves doing a literature review / looking for relevant papers   Choose a reason, and design an experiment to check if that really is the reason  Often the experiment is trying out some method to address the problem   Repeat  For checking whether an approach is implemented correctly  This is the process I followed after implementing an approach / method to check if I implemented it correctly  In RL it\u0026rsquo;s often difficult to tell if you correctly implemented something because often the agent will perform well / behave reasonably even if the method is implemented incorrectly  The extent to which this is the case varies based on what you\u0026rsquo;re implementing (e.g., getting the training algorithm wrong will generally be more noticeable than getting an exploration strategy wrong)        Run training on a single, easy level in Coinrun\n I found an easy training level by sequentially going through the levels on Coinrun: python -m procgen.interactive --env-name coinrun --level-seed 4 --distribution-mode easy   The level just involves learning to move to the right:   Run training for ~5 minutes and if the agent hasn\u0026rsquo;t learned to move right, then assume there\u0026rsquo;s a bug  This works when using PPO, but it doesn\u0026rsquo;t work when using some other methods  DQN is particularly slow to learn early in training, so it can take much longer to pass this sanity check when using it        Run training on multiple levels of Coinrun\n I used Coinrun because it\u0026rsquo;s probably the easiest environment    Run training on all (or relevant subset) of envs\n  For running experiments  The competition is based on the rllib package, which is built on top of ray, so I used ray for running hyperparam searches / experiments.  ray tune has a run_experiments function, that runs a set of experiments, where those experiments can be specified as a set of configuration files So I basically wrote a script to generate the configuration files for experiments I want to run   Here\u0026rsquo;s the script  The script uses a (named) cross product for grid searches: from itertools import product, starmap from collections import namedtuple def named_product(**items): Product = namedtuple('Product', items.keys()) return starmap(Product, product(*items.values())) ... def sample_configs(...): parameter_settings = named_product( learning_rate=[1e-4, 1e-3], num_sgd_iter=[1, 2], ..., )   This gives a namedtuple object for each set of parameters, which helps simplify the code   I also organized hyperparameters into different classes, which helps when dealing with a large number of hyperparameters        Approach Methods used in the solution we submitted  This section covers the approach we ended up using in the winning solution There were four main categories of methods we used:  RL algorithm  We used Phasic Policy Gradient (PPG)  PPG is basically an extension of PPO that\u0026rsquo;s more sample efficient  It\u0026rsquo;s more sample efficient because it performs more updates with a given batch of data than PPO (though only to the value function), and because it avoids or minimizes gradient interference between the gradients from the policy and value objectives   See the paper for details since it\u0026rsquo;s presented clearly there   We used the single-network variant of PPG to improve computational efficiency  This is because of the 2-hour time limit for training In the paper, they detach the value head (during policy updates) when using a single network, but we found this resulted in some instability (e.g., the network would collapse in some envs)  They mention they were worried about this in the paper, but that it wasn\u0026rsquo;t a problem for them My guess is that changes to other hyperparameters resulted in it causing problems for us Instead of detaching the value head, we just reduced the value loss coefficient     We implemented PPG in rllib by implementing a new PolicyOptimizer subclass  It just stores the states and value targets in a buffer, and runs the value / auxiliary epochs occasionally    Data augmentation  We originally used data augmentation to improve generalization performance, but it turned out that it also improved sample efficiency  I believe the reason for this is that the data augmentation prevents overfitting to the levels observed so far This results in the policy generalizing better to unseen levels it encounters during training As a result, it performs better in the environment more quickly, which allows it to learn about the optimal policy more quickly   We tried the methods from this paper  Here\u0026rsquo;s a graphic from the paper showing the effect of the augmentations   We ultimately ended up using the random translation augmentation  This worked well in most environments Some augmentations worked better in certain environments, but would hurt performance in others     The random translation code need to run quickly due to the 2-hour time limit, so I ended up implementing it manually instead of using numpy.roll or something similar  The implementation is pretty ugly, so I won\u0026rsquo;t include it (see here), but it ended up being about 4x faster than numpy.roll (there might be a more suitable function in numpy, but couldn\u0026rsquo;t find one)    RL tricks   We tried the RL tricks from this paper\n That paper focuses on continuous control tasks, but we figured the results would likely transfer They found that reward normalization was the most important implementation detail And that\u0026rsquo;s also what we found, and ended up using only that change In the paper, they discuss the options for normalizing rewards  The most obvious thing to do is to normalize the reward values themselves by subtracting their mean and dividing by their standard deviation  The main issue with this is that the goal is for the target-being-predicted (i.e., the state-value) to be normalized  But normalizing the rewards individually doesn\u0026rsquo;t accomplish this  For example, if you assume the normalized rewards are distributed normally with zero mean and unit variance, then their sum will be normally distributed with zero mean, but with variance the sum of the individual variances So instead, you would ideally normalize the returns using their mean / variance  This is approximately the approach taken by the PPG paper  They do something where they reverse-discount the observed rewards (see the link for an explanation), which I don\u0026rsquo;t fully understand I just computed the variance of the discounted returns, and divided by that ignoring the discount factor  I\u0026rsquo;m not sure why they take their approach instead of just doing this One reason might be that early on (in the rollouts) you don\u0026rsquo;t know what the returns are, so how do you normalize by their statistics?  I just ignored this problem, but it\u0026rsquo;s possible their approach addresses it             The second issue is that you generally do not want to change the mean of reward values in reinforcement learning  The justification being that (mean-normalizing rewards), \u0026ldquo;affects the agent\u0026rsquo;s will to live\u0026rdquo;  For example, if all the rewards are initially positive, then an agent is incentivized to avoid terminal / absorbing states But if you mean-subtract the rewards, then the agent may be incentivized to seek out terminal / absorbing states (depending on whether it\u0026rsquo;s encountering negative rewards)       So ultimately I ended up with something along the lines of: def normalize_rewards_running_return(policy, rewards, eps=1e-8): \u0026quot;\u0026quot;\u0026quot;Updates reward statistics, and normalizes rewards by their standard deviation. Args: policy: The policy being optimized rewards: Numpy array of reward values eps: Value to add to denominator to avoid numerical issues Returns: Normalized rewards \u0026quot;\u0026quot;\u0026quot; # Implements Welford's Algorithm (https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance) policy.reward_stats.update(rewards) return rewards / (policy.reward_stats.std + eps)   The OpenAI implementation computes a single variance across workers  I just ignored this aspect and it seemed to work fine        The second RL trick we used was disincentivizing no-op actions\n A lot of the environments in Procgen have no-op actions (i.e., actions that when taken have no effect)  Since the agent is limited to 8 million steps, taking no-op actions makes the agent less sample efficient (it basically wastes samples)   To disincentivize no-op actions, we checked for cases where the observation (i.e., image) didn\u0026rsquo;t change across timesteps  You could argue that this is taking advantage of a limitation of the Procgen environments, which is that they don\u0026rsquo;t resemble natural images, which would (likely) never have duplicate images across timesteps  In the real-world case, you have to do something more complicated, for example using some more general intrinsic motivation method  From this perspective, penalizing no-ops is basically an efficient, environment-specific, intrinsic motivation strategy       One environment where it helps a lot is in Miner  In this case, the agent learns not to run into walls / bricks that won\u0026rsquo;t move But it also learns to rapidly switch between states rather than remain stationary   A problem with this approach is that it doesn\u0026rsquo;t work for environments where the image changes despite no-op actions  For example, in Chaser the image changes because the environment has the chasing agents moving around      Hyperparameter tuning  Hyperparameters have a large impact on the performance of RL algorithms  PPO is actually less sensitive to hyperparameter values than other algorithms like DQN, but they still matter   Tuning hyperparameters properly requires a lot of time and/or resources  To reduce the cost, I generally assumed that hyperparameters were independent whenever reasonable I also ran hyperparamter tuning throughout the competition, tuning only one or two hyperparameters are once to check whether some newly-implemented method improved performance  As a result, the final hyperparameters were likely suboptimal / outdated     This table gives the values of hyperparameters that differ from the default values from the Procgen paper and that I think are important     Hyperparameter Value     Network Architecture Impala (32, 48, 64)   Rollout Fragment Length 16   Number of Workers 7   Number of Envs per Worker 125   Minibatch Size 1750   PPG Aux Loss Every k 32   PPG Aux Loss Number of Epochs 2   Value Loss Coefficient 0.25   Framestack 2   Dropout Probability 0.1   No-op Penalty -0.1      Some comments on these hyperparameter values:   The number of workers and number of envs per worker were set to minimize training wall clock time\n  The rollout fragment length was set to a much smaller value than that of the original paper (16 versus 256)\n The reason being that I wanted the data in each minibatch to be as uncorrelated as possible, and having a small rollout fragment length allowed for running a large number of environments in parallel, which results in less correlated data This mainly seemed to improve consistency of the algorithm, but it also improved performance a great deal on one of the private environments (graph downloaded from submission (since the environment is private), but it\u0026rsquo;s from the Safezone environment, which other teams reported difficulty with):      The network size and minibatch size were tuned jointly over the course of the competition to balance training time and performance\n  The value loss coefficient was set lower than typical to account for not detaching the value heading (as discussed in the PPG section)\n  Using a nonzero dropout probability improved performance (surprisingly, because dropout typically slows down training a lot)\n The main reason I can think of for why this would be the case is that might improve generalization to new levels sufficiently to compensate for the increase in training time      Other methods we tried that didn\u0026rsquo;t improve performance Algorithms  We also tried DQN / Rainbow, and Soft Actor-Critic, and couldn\u0026rsquo;t get either to perform better  These methods should in theory be more sample efficient because they can reuse the data to a larger extent  This is because both are off-policy methods   Rainbow also implements a variety of methods that should improve performance  For example, Noisy Nets, prioritized experience replay, distributional RL     We got DQN to work on some envs, it just required a lot more experience / very slow training (e.g., large target network update interval, small learning rate, etc)  This matches the result from the Procgen paper  They give a possible explanation for DQN\u0026rsquo;s poor performance  Which is basically that the diversity of the levels for each environment gives DQN trouble   Why DQN has more trouble with diverse environments than e.g., PPO I\u0026rsquo;m not sure     I think that if you removed the time constraint (two hours) on the training time (while still constraining to 8 million time steps), these methods should be able to achieve better performance  But given the time constraint, PPG performed better because it already reuses the data to the maximum extent possible (approximately)  This is the main advantage of PPG: that it gives a way to make PPO more sample efficient through greater sample reuse      Exploration   In many of the environments, dithering exploration strategies are quite poor\n For example, in the Heist environment, a dithering exploration strategy takes a very long time to solve many levels Another example is that in many levels, a single random action can result in the agent being killed  e.g., Chaser, Miner, Leaper, etc      We implemented Noisy Nets, but for the policy gradient case\n This poses a few challenges for PPO  For example, adding noise to the policy output when sampling results in the training policy being different from the sampling policy  Since the PPO update implicitly constrains the policy to not change to much, the additional change due to the noise makes the policy update less efficient   You can get around this issue somewhat by maintaining the same noise vector during sampling as during updating  The problems with this are that maintaining that noise vector is fairly complicated in RLLib, but more importantly with noisy nets that means different samples in each batch might have different fully connected weights  And running a forward pass with different weights is extremely inefficient (depending somewhat on which weights change)       As a result of those challenges, we couldn\u0026rsquo;t get noisy nets to improve performance    An alternative to Noisy Nets for improving exploration that uses approximately the same intuition (that dithering strategies are worse than temporally-coherent exploration) that works better with PPO is variational options\n These methods basically all introduce some sort of latent variable as input to the policy And the policy is rewarded for having the latent variable have high mutual information with the future state-action pair(s) The result is that you can reduce dithering in the policy (e.g., by reducing or removing the entropy bonus), and only rely on the noise in the latent variable sampling to provide exploration  The problem with this for PPO/PPG is, first, that the entropy bonus serves to make the policy update more stable (so getting rid of it makes the algorithm less stable) And, second, it doesn\u0026rsquo;t make sense to deterministically select actions for PPO when sampling rollouts  The result is that you keep the random action sampling, which diminishes the effect of the variational option because you\u0026rsquo;re still employing dithering exploration        Form of the policy / model Accounting for partial observability  Some of the environments are partially observable even when provided with the last ~4 frames  For example, Jumper requires remembering when you last jumped Another example is that caveflyer may require you to remember where you\u0026rsquo;ve already explored for the exit   To account for this partial observability, we tried out a recurrent policy  This slowed down learning relative to the CNN policy to the extent that accounting for the partial observability wasn\u0026rsquo;t worth it    Object-based inductive bias  An idea we tried out early on was to encode an object-based inductive bias  For example, we tried having the model feature extraction use the model from MONet or C-SWM   The intuition behind this is that, all the environments involve a relatively small set of interacting objects (small relative to number of pixels)  If we can represent the state as a set of objects and relationships between them instead of as pixels, we should be able to learn more efficiently  Because that object-based representation of the state is much lower-dimensional Because the object-based representation encodes some invariances that don\u0026rsquo;t exist in the image representation     This didn\u0026rsquo;t work because the object representations that were learned didn\u0026rsquo;t correspond to the objects relevant for planning  For example, the \u0026ldquo;objects\u0026rdquo; discovered by these algorithms were generally the foreground and background of the image instead of e.g., the different agents in the scene  This makes sense when using an objective based on e.g., reconstructing the observation and not on planning performance But even when using the RL objective exclusively, the object representations learned weren\u0026rsquo;t useful      Data augmentation  We tried automatically deciding which data augmentation to use using a multi-arm bandit algorithm  This approach was proposed in this paper The approach worked in the paper when they were using 25 million steps, but we found that using 8 million steps wasn\u0026rsquo;t enough to consistently find the best augmentation   We also tried Mixreg  This method augments the data by forming a convex combinations of observations and their outputs  Here\u0026rsquo;s an example taken from the paper:   The intuition being that it should result in augmented data that more closely resembles unseen states than other augmentation methods We found that it didn\u0026rsquo;t work as well as just random translation      Lessons This section covers some miscellaneous lessons learned\nAbout RL competition strategy 1. Avoid overfitting to the leaderboard (when it\u0026rsquo;s not the test set)  At the end of the competition I was 7th on the leaderboard, but ended up getting 1st  The leaderboard was determined based on six public environments, whereas the final ranking was based on the full set of sixteen public environments   I suspect part of the reason for this was that some of the other teams were overfitting to the leaderboard (e.g., choosing their algorithm based only on the environments considered by the leaderboard)  This is a reasonable strategy if you don\u0026rsquo;t have much compute resources to use to evaluate performance across all environments, but should be avoided if possible    2. Optimize for performance on private environments  The scoring for the competition was 0.5 * public score + 0.5 private score The public score was based on 16 envs, whereas the private score was based on 4 envs So everything else being equal it\u0026rsquo;s better to improve performance on the private envs Since the leaderboard leaked information about performance on the private envs this was possible  There were a few cases where the best hyperparameters on the public envs were different than on the private envs, and I went with the values best on the private envs    About RL competitions 1. RL competitions are largely about engineering as opposed to performing novel research  There is a huge design space for RL algorithms  By this I mean that a large number of methods exist, and it\u0026rsquo;s unclear without trying them out what will work best Just implementing these existing methods is (a) time consuming and (b) likely to yield \u0026ldquo;state-of-the-art\u0026rdquo; performance   Implementing existing algorithms is also much lower risk than trying to develop a new algorithm with respect to competition performance  Highly-novel algorithms often require a few iterations of improvements before they outperform existing methods   RL algorithms can be heavily compute-optimized, and RL competitions often require some computational limitations  There\u0026rsquo;s similarly a large design space / number of options to optimize performance (e.g., how samples are stored, lower-precision training, etc)   For those reasons, I\u0026rsquo;m not sure RL competitions are a good way to promote the discovery of novel algorithms  Which is largely the motivation for competitions hosted as part of conferences   Counter arguments:  Supervised learning competitions have been shown to be effective at promoting novel research  E.g., ImageNet   It\u0026rsquo;s possible there just wasn\u0026rsquo;t enough interest in this competition  As a result, novel solutions weren\u0026rsquo;t necessary to win But it\u0026rsquo;s possible that if there was greater interest that novel solutions would be required      2. RL competitions are a good way to find out how well existing methods can solve a task  While they may not be great at promoting novelty, they are good at finding out how well existing methods can perform  This is because they get a lot of people trying out different combinations of existing methods  i.e., they help cover the large design space     In the case of the Procgen competition, the performance of the best approaches was better than the baseline performance by a surprising amount  3. The Procgen benchmark promotes general approaches  Early in the competition I tried a number of methods that were motivated by improving performance in a single environment For almost all these methods, it turned out that while they improved performance in one environment, they hurt performance in the others This makes me think that the diversity of environments in Procgen does a good job of favoring general-purpose methods over environment-specific ones, which I think is an important quality in an RL benchmark  4. Working with multiple people in a competition has a lot of advantages  This one is a bit obvious, but just including it for my future reference  Appendices Appendix 1: Reasons for suboptimal performance  Here\u0026rsquo;s an outline of reasons the agent might be performing suboptimally. This categorization is not perfect:  It conflates (i) problems, (ii) root causes of problems, and (iii) solutions to those problems. It would be better organized as a graph with cycles instead of as a tree, because different problems can have the same cause.   It\u0026rsquo;s a work in progress.   Reinforcement Learning Algorithm  Suboptimal exploration  Inefficient exploration due to no-op actions Lack of entropy regularization   Policy optimization  High-variance updates  Minibatch contains highly-correlated data  Number of parallel envs / works is too small Rollout fragment length is too long   Minibatch size too small Discount factor is too large Lack of reward normalization   High-bias updates  Rollout fragment length is too short Bootstrap value function estimate poor   Optimization objective doesn\u0026rsquo;t reflect true objective  Entropy regularization is too strong     Value optimization  target values are not normalized  Due to a lack of reward normalization       Model  Forgets previously-learned information, or learns slowly  Limited model capacity Large weight updates  Lack of gradient clipping Lack of reward normalization Due to rare events in the environment with high reward value   Gradient interference  Sharing policy and value networks   Internal covariate shift  Lack of batch normalization     Insufficient / incorrect inductive bias  Image-related issues  Overly dependent on texture Overly dependent on color   Lack of invariance to reasonable transforms  Poor or insufficient data augmentation     Partial observability  Lack of sufficient observation history  Frame stacking insufficient Form of the model insufficient (e.g., should use RNN instead)   Previous action required Timestep required     Optimization  Suboptimal optimizer  SGD variants   Poor gradient clipping  Clipping by global norm slows down learning too much Clipping elementwise prevents learning optimal behavior   Learning rate is too high   Generalization  Lack of invariance to irrelevant changes Invariance too strong    ","date":1608683115,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608683115,"objectID":"35050a72851bd15686358879131b48c2","permalink":"https://wulfebw.github.io/post/procgen/","publishdate":"2020-12-22T16:25:15-08:00","relpermalink":"/post/procgen/","section":"post","summary":"What I tried and learned","tags":[],"title":"NeurIPS 2020 Procgen Competition","type":"post"},{"authors":[],"categories":["reinforcement learning","ssb64"],"content":"Summary The existing Nintendo 64 Reinforcement learning environments have some disadvantages. Gym-Retro can almost support N64 emulation, but not quite. I made some changes to the Gym-Retro code to allow for N64 environments. This post describes some of the challenges in doing that, initial results in training an agent in Super Smash Bros. 64, and next steps.\n You can find the code here. Here\u0026rsquo;s an example of an RL agent (Pikachu) playing the game AI (level 9 DK):    Environment Motivation There are some existing N64 RL environments. Gym-Mupen64Plus is the main one. It works by running an N64 emulator, taking screenshots of the game, and parsing the screen to compute rewards. This has some issues. First, it means that the environment runs at a variable rate with respect to the agent (i.e., the time between taking an action and having it enacted in the environment is variable). Second, parsing the screen is brittle and not scalable (to more games) compared with reading values from RAM. Third, the screen-shotting mechanism has some disadvantages, for example it\u0026rsquo;s difficult to run multiple environments at once.\nThe goal of this project was to implement an RL environment for N64 that didn\u0026rsquo;t have these issues, and that operated like a typical gym environment.\nChallenges When I started, I considered a few options for implementing the environment, and settled on adapting the Gym-Retro codebase to allow for N64 emulation. I wasn\u0026rsquo;t sure when I started why Gym-Retro didn\u0026rsquo;t already support N64 games. It turns out the main reasons for that are (i) N64 uses dynamic memory locations for game data, and Gym-Retro is implemented assuming static memory locations and (ii) emulating N64 visuals requires adding OpenGL support (and even with this support emulation is fairly slow).\nN64 Emulation Gym-Retro incorporates the console emulators (called \u0026ldquo;cores\u0026rdquo;, borrowing libretro terminology) as subrepos using git-subrepo. I took this same approach, and added Mupen64Plus-Next. This seemed to be the most actively developed libretro N64 core.\nN64 dynamic memory N64 games (at least Super Smash Bros. 64) store data in memory in dynamic locations, but the address of that data is stored in a constant location. For example, the health of player one might be stored (approximately) anywhere in the block of RAM from 0x80000000 to 0x88000000 (see details on N64 memory map); however, the pointer to this health value is always stored at 0x80000000 + 0x000A50E8 + 0x00000020 + 0x0000004C.\nGym-Retro isn\u0026rsquo;t designed for this sort of dynamic memory lookup, which is (I believe) partially why N64 wasn\u0026rsquo;t supported. In order to handle this, I (approximately) copied the approach taken by BizHawk of having a separate memory perform the data lookup, but implemented this in python instead of c++. One subtle aspect to this is that the data pointers refer to absolute locations in memory, but the memory available is just the RDRAM section of size 0x08000000. So reading a location in memory ends up looking like:\n# Skipping the rest of the class... def read_address(self, ptr): self.assert_valid_ram_address(ptr) addr_list = self.ram[ptr:ptr + self.addr_size] abs_addr = convert_byte_list_to_int(addr_list) rel_addr = abs_addr - self.rambase self.assert_valid_ram_address(rel_addr) return rel_addr  I copied this approach from ScriptHawk.\nOpenGL The second challenge in supporting N64 in Gym-Retro is that the N64 libretro core requires that the libretro frontend provide OpenGL support. This requires some effort to implement, but it also means that the environment will be fairly slow to simulate because rendering 3d graphics (even using OpenGL) is slower than rendering the 2d graphics used in the supported cores (like Atari). I know next to nothing about OpenGL, so I basically copied the minimal libretro frontend code from sdlarch into the Gym-Retro emulator class (though adapted it to use GLFW instead of SDL because GLFW provided all the functionality I needed and is a lot smaller and could be directly incorporated into the project as a subrepo).\nEven though I just copied the sdlarch code into the emulator, it took some effort to figure out where everything should go. I couldn\u0026rsquo;t find much documentation on how to implement a libretro frontend with OpenGL support online.\nConclusion The end result is an N64 RL environment using Gym-Retro. Running 16 environments in parallel (on 8 cores) I\u0026rsquo;m able to get 45 frames per second. This is much slower than, for example, procgen, which can apparently simulate \u0026ldquo;thousands of steps per second on a single core\u0026rdquo;. This might be part of the reason OpenAI moved away from retro to procgen (in addition to the generalization properties of procgen).\nInitial Experiments After getting the environment running I ran some initial experiments to make sure it works. These are \u0026ldquo;initial\u0026rdquo; in that they involve training against the game AI instead of self-play.\nEnvironment Setup For these initial experiments, the environment is set up for a single match between Pikachu (the controlled agent) and a level 9 DK. DK acts deterministically (I wasn\u0026rsquo;t sure about this beforehand, but this is clear from the results), though items are included and occur randomly. Since DK\u0026rsquo;s behavior is determined by the items, DK also acts randomly, though in practice this doesn\u0026rsquo;t matter much.\n Observation space is a stack of two color images. I started with grayscale images, but the agent didn\u0026rsquo;t perform well, I believe because Pikachu blended into the background too much. I think four frames would help since two frames seems not quite Markovian, but using four color frames slowed down training a fair amount. I also used color images because they might make it easier to identify items.   Where's Pikachu?   Action space is a multi-discrete space: two dimensions for directional and one for the button press. I could have alternatively used a multi-class action space, but it would have come out to be size 36, which seemed fairly large. Reward Function is +1 for killing DK, -1 for dying, +damage dealt / 100. I initially started with -damage received / 100, but that resulted in too much avoidance behavior.  I chose DK as the opponent because the goal is ultimately to play the trained AI, and I\u0026rsquo;d prefer to play with DK. It turns out this isn\u0026rsquo;t a great choice of opponent for a sanity check because DK can take a lot of damage without dying. This results in the agent needing a great deal of exploration to find the value in actually killing DK as opposed to just damaging him a bunch. This is also an issue because the item drops include health, which DK tends to pick up thereby extending the matches.\nAgent Reinforcement Learning Algorithm I started out using the baselines implementation of PPO. My plan was originally to compare at least with DQN, but it turns out that because DK acts deterministically (disregarding items) the policy PPO learns is basically a deterministic sequence. For this reason I suspect that Brute would probably do better than PPO in this setting. This isn\u0026rsquo;t much of an issue because the real goal is to train an agent through self-play where a deterministic sequence would perform poorly. This uses the Impala CNN because the smaller CNNs didn\u0026rsquo;t work, which is consistent with some of the results on procgen.\nResults Training for 10 million steps took roughly 3 days on an 8-core machine with an RTX 2070. The plot of average episode reward during training shows fairly consistent improvement, though it trailed off towards the end:\n Here are two separate matches. In both cases, Pikachu executes (what seems to be) an identical sequence of actions up until a certain point, after which it starts to improvise:\n I think Pikachu might be trying to pick up an item here, but is just facing the wrong way.   This one involved more improvisation. It seems like Pikachu has at least learned to perform an up-B maneuver when off the map.  Future Work Environment Observation Space  Vision: I think the visual case is approximately as performant as it\u0026rsquo;s going to get. RAM: the environment provides access to ram, but it currently requires writing a memory class for every game. This could be generalized so that the memory locations just need to be specified in a text file. Manual feature sets: OpenAI 5 and AlphaStar operate on manually designed sets of features derived from RAM. It\u0026rsquo;s likely that if the goal is to build an RL agent for integration into SSB64 Mods that this is the approach that should be taken because training will be faster and deployment will be lighter-weight. Implementing this would require running the emulator without doing any screen rendering, which would likely require writing a mupen64plus visualization plugin that just does nothing. I suspect that this will be the only way to get good self-play agents working because rendering the screen is too slow and I don\u0026rsquo;t have that much computational resources for doing this.  Action Space A comparison of the multi-discrete action space with the multi-class action space might be worthwhile. Multi-class for example performed better in the behavioral cloning case, but that\u0026rsquo;s a somewhat large action space to use for reinforcement learning, which might be slower to learn than the multi-discrete option.\nGames The environment should work for all N64 games, though I believe each will require its own RAM specifications. Those are largely available via ScriptHawk, though the values there differed from what I found in some cases.\nAgent A Recurrent policy might be worth trying. There are also questions about how the policy will work in the self-play setting. For example, how will it know which agent it is controlling? Chances are it won\u0026rsquo;t be able to based on the screen alone and some additional information will have to be provided via the RAM.\nA comparison between DQN, MuZero, and other model-based methods could be interesting. DQN might be more sample efficient, and that would help because the interaction here is the bottleneck. MuZero could be interesting because this is effectively a competitive environment, and explicitly modeling it as one might improve performance. A model-based approach using Contrasitve Learning of Structured World Models (C-SWM) could help improve sample efficiency via an object-based inductive bias. I tried this out on the behavioral cloning dataset and it seems to give some interesting results:\n C-SWM applied to a SSB64 dataset.  It seems to separate out the foreground from the background, but not the agents. I think correcting for the camera movement could fix that. Learning the model for planning purposes like in MuZero might also put greater emphasis on the agents.\nDeployment The goal is to be able to play an agent trained through self-play. You\u0026rsquo;d ideally be able to use a controller. So I\u0026rsquo;ll need to write a player agent that takes input from a controller and passes that to the gym environment. This shouldn\u0026rsquo;t be too hard using the inputs package.\nLessons Gym-Retro Here\u0026rsquo;s how this works: the python interface is provided via pybind11 (see retro.cpp). retro.cpp has an Emulator object defined in emulator.h/cpp. The emulator class is actually a libretro frontend, though it only implements some of the frontend functionality. This class interacts with libretro cores by dynamically loading functions from them. The integration UI is a UI on top of the emulator with some search functionality. The search functionality doesn\u0026rsquo;t work with N64 due to its use of dynamic memory locations.\nBugs / things that took a long time to figure out  One bug I spent a long time on before I realized that N64 used dynamic memory locations was getting the search functionality in the integration UI to work. There was a bug where the rambase was loaded from a file as a signed int, which when converted to a size_t gave an incorrect value, but only if the rambase was large enough. Probably spent 2 hours on that. I typically use pytorch, but was using tensorflow since baselines uses it. Instead of using baselines' run function I just implemented my own in a script, but didn\u0026rsquo;t look at run carefully and missed the part where they set a specific tensorflow gpu config. Apparently tensorflow expands to use all (?) of the gpu memory. This resulted in mysterious segfaults from OpenGL that were difficult to debug. Figuring out the format of the n64.json file took a long time. I don\u0026rsquo;t think there are docs on how this is defined. So here\u0026rsquo;s what everything is as far as I can tell:  lib: this should be a prefix of the name of the shared library the core is compiled to. So for instance mupen64plus is compiled to mupen64plus_next_libretro.so. So lib should be set to \u0026ldquo;mupen64plus_next\u0026rdquo;. Furthermore, after compiling the core each time, you need to copy the shared library to retro/retro/cores. This is done by setup.py initially, but if you recompile you have to do it manually. ext: extension of the rom files for this core. types: I believe this is only used by the searching functionality to limit the scope of its search for variables to the specified types. rambase: the location in memory where the relevant portion of ram starts. In the n64 this is 0x80000000. This has an effect on how the emulator reads the ram so you have to set it correctly. To find out what value to use, look up the \u0026ldquo;memory map\u0026rdquo; for your core. keybinds: these are the keyboard keys used to manually control the environment. buttons: these are the actual button values used to take actions, and (I believe) their order does matter. It needs to match the order used in the core/libretro.h file. So for example, atari2600/libretro.h:178 shows the button ordering. The buttons in this json file need to match that. All the libretro cores implement a similar ordering it seems. actions: each row is a dimension of the action space (in the multi-discrete case). Within each dimension, each element is an action in that dimension. Within each action, the elements are the buttons that result in that action.   What to do about the analog stick in N64? The analog stick of the other cores just provides directionals, but in N64 it provides the magnitude of the directional, and that has an influence on the behavior in the game. I ended up changing the core to map these fine-grain controls to directionals. MAX_PLAYERS: The default MAX_PLAYERS value is 2, but for N64 it should be 4. This resulted in the other players executing random commands when running the game and it took me probably an hour to figure out why that was happening.  The main tool I used to figure that stuff out was gdb, but debugging a c program called through python, which is not something I realized you could do previously.\nN64 Emulation Visualization Plugins When I first got the emulator working and realized that emulator.h/cpp didn\u0026rsquo;t implement the OpenGL functionality I tried to avoid implementing it myself by using software-defined rendering in the emulator. The library for doing this is referred to as angrylion, and it actually works fine, except that it\u0026rsquo;s very slow, running at about 8 fps compared with OpenGL\u0026rsquo;s 45 fps. However, getting an end-to-end system running with angrylion, and then going back to tackle the relatively difficult task (for me) of implementing the OpenGL functionality for libretro frontends was (accidentally) a good strategy because I probably would have given up if I had had to implement the OpenGL stuff to get anything working. This is mainly because with the angrylion version already implemented, I knew what \u0026ldquo;working\u0026rdquo; looked like, and I also was much more familiar with the system by the time I tried to tackle the OpenGL stuff.\n","date":1591420478,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591420478,"objectID":"56d883018215086afd17a523a219d3dc","permalink":"https://wulfebw.github.io/post/ssb64-rl-01/","publishdate":"2020-06-05T22:14:38-07:00","relpermalink":"/post/ssb64-rl-01/","section":"post","summary":"Introducing a Super Smash Bros. 64 RL environment and initial experiments","tags":[],"title":"Super Smash Bros. 64 AI: Reinforcement Learning Part 1: The Environment","type":"post"},{"authors":[],"categories":["rl","muzero"],"content":"Context   MuZero paper.  Tabular implementation.  See that link for code description and some experiments.    Question  Why should MuZero be better than other deep RL algorithms (in particular DQN)? The paper, \u0026ldquo;When to use parametric models in reinforcement learning?\u0026quot;, goes into this question but with an emphasis on a different model-based algorithm  They define planning in an unusual manner as using \u0026ldquo;more computation without additional data to improve predictions and behavior\u0026rdquo;  The \u0026ldquo;usual\u0026rdquo; definition being the use of a (learned) transition and reward model to compute a value function or policy   The reasons they give for why parameteric model-based planning might outperform non-parameteric (experience replay) planning are not that clear to me, but may include:  Inductive bias of the parameteric model (improving generalization) Improved exploration through use of the model Improved credit assignment (\u0026ldquo;backward planning\u0026rdquo;)     To answer the question, I think the reason MuZero might outperfom DQN is the second reason: that it exhibits better exploration  This isn\u0026rsquo;t the typical kind of improved exploration through model use that you get with e.g., R-max. Instead, because the learned value function is approximate, if the learned model is \u0026ldquo;good enough\u0026rdquo;, then you can use additional computation to select better actions in the environment than you would if you behaved greedily with respect to the value function itself.  Where \u0026ldquo;additional computation\u0026rdquo; means running MCTS. This means that the actions you take will, on average, be better. Which intuitively should mean that you\u0026rsquo;ll learn about the optimal policy and its value function more quickly.  And reach different parts of the state space that have higher value.   Which can be viewed as improved exploration.   This works for the definition of \u0026ldquo;better\u0026rdquo; as \u0026ldquo;more sample efficient\u0026rdquo;  But that additional computation takes more resources and time, so if you defined \u0026ldquo;better\u0026rdquo; as the algorithm that provides the best solution given some amount of time, DQN might outperform MuZero.      ","date":1575849600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575849600,"objectID":"dc6f8ca6e7bc2b429f10d7886b8bce71","permalink":"https://wulfebw.github.io/post/muzero/","publishdate":"2019-12-09T00:00:00Z","relpermalink":"/post/muzero/","section":"post","summary":"Why should MuZero perform better than other DRL algorithms?","tags":[],"title":"MuZero","type":"post"},{"authors":[],"categories":["imitation learning","ssb64"],"content":"Summary  Goal: develop a Super Smash Bros. 64 AI that acts based on image input Approach: start with behavioral cloning since it\u0026rsquo;s simple Dataset: Images and action sequences, and training and validation splits available here ( s3 bucket) Model and Training: Convolutional and recurrent neural networks, implemented in pytorch, code available here Deployment: Through gym-mupen64plus Evaluation: Quantitative gameplay performance (damage, kills, lives lost) Demo: See the description of the video for some interesting events   Table of Contents\n  Summary  Motivation  Related work  Dataset  Approach  Experiments and Results  Conclusion and Future Work  Appendix 1: Dataset collection  Appendix 2: Imitation Learning  Appendix 3: Model and training details  Appendix 4: N64 as an RL environment  Appendix 5: RNNs why use them, how to optimize and regularize them  Motivation Build a Super Smash Bros. 64 (SSB64) AI agent to play against.\nRelated work N64 and SSB64 AI The only info on an SSB64 AI I could find online was this cs231n project with associated videos. It\u0026rsquo;s a nice write up and was helpful in doing this project.\nI thought implementing a similar project myself would be worth doing nevertheless because:\n They don\u0026rsquo;t provide access to any data or code Their agent seems to behave a bit repetitively I was curious whether a different action-space or model would work better As stated, I wanted to play a better AI myself   TensorKart is a project that developed a Mario Kart 64 AI. That project (and associated blog post) was also helpful, and provided the technical approach roughly followed in this project.\nGame AI in general There\u0026rsquo;s a ton of work on game playing. Most of it focuses on reinforcement learning (RL). This is because RL / approximate dynamic programming is currently the best approach to the problem. See for example OpenAI five or Deepmind starcraft II AI  or AlphaGo. RL is the best approach in these game playing scenarios because (among other reasons):\n It\u0026rsquo;s possible to collect a large amount of training data through simulation. The training and testing distributions closely or exactly match. The agent can benefit from competitive self play. There\u0026rsquo;s an easily accessible reward function (e.g., win/lose, damage, deaths) that aligns well with the true goal (developing a competitive agent).  Dataset The dataset consists of a set of matches. See Appendix 1 for details. Main points:\n  mupen64plus was used for emulating the N64. The dataset consists of a set of gameplay matches.  In total about 175,000 frames representing about 6 hours of gameplay.   Matches were played between blue DK and the highest level game AI Kirby.  This allows the network to identify which agent it controls. Extending this to multiple characters would require e.g., adding a feature indicating the controlled character.   All matches were played on the dreamland stage. Items were included to make it more interesting.  Here\u0026rsquo;s a short clip selected from the dataset to give a sense for the behavior being imitated:\n Approach I started with behavioral cloning (BC), which is supervised learning using a dataset of expert demonstrations, despite it being a worse-performing approach than RL because:\n It\u0026rsquo;s simpler to implement than RL methods.  Allows for becoming familiar with the emulator in a simplified setting.   It provides a nice baseline for comparison. It has more predictable computational costs than RL.  The main disadvantages of behavioral cloning are:\n It may take a lot of data to achieve good performance (see Appendix 2). The resulting agent will not perform significantly better than the expert providing the data.   It might perform slightly better due to decreased reaction time, but that\u0026rsquo;s not particularly interesting or fun to play against.  Observation space  A requirement for this project was that the AI has to act on image observations.  There are some alternatives to this observation space (e.g., operating on the game RAM).   A single image is not a Markovian representation of the state.  It\u0026rsquo;s unclear to what extent multiple images would improve performance. For this reason, different numbers of frames were considered as input (fixed history in the CNN case, and complete history in theory in the RNN case).    Action space I considered two action spaces:\n Exclusive multiclass action space consisting of common SSB64 moves.   This is what the cs231n project uses. The actions include the buttons, the axes, and smash combinations (A + left, A + right, etc).  A multi-discrete action space with a value for each joystick axis, and one value for the button.   This action space seemed like it should allow for more efficient learning.  Models  A Resnet-9, multi-frame model.   Using a four-frame history of grayscale images.  An RNN with Resnet feature extractor.   This takes as input individual grayscale images at each timestep. Same visual feature extractor as the fixed-length history model.  The models were implemented in pytorch. See Appendix 3 for training details.\nExperiments and Results  Edit (05/18/2020): I never ran this evaluation because gym-mupen64plus had a number of issues with it  See the appendix 4 for more details    Deployment The models were deployed using gym-mupen64plus.\nConclusion and Future Work Despite not being the best approach to the problem, behavioral cloning was a helpful place to start in creating a SSB64 AI. I learned a fair amount about emulating the game (see Appendix 4), pytorch ignite (see training script), regularizing RNNs (see Appendix 5).\n\nThe main direction for future work is applying RL to the problem. As discussed in Appendix 4, the N64 isn\u0026rsquo;t the most convenient environment for RL for technical reasons, so most of the effort in applying RL would be in creating a convenient environment.\nAppendix 1: Dataset collection  Images were collected by adapting the TensorKart codebase  See this script   I collected the data on a mac. The Inputs python package used in TensorKart doesn\u0026rsquo;t work on mac for joysticks, so I made some changes to the input plugin for mupen64plus to accept a command line argument for a filepath at which to store the actions received. See here for the fork containing those changes. Image-action pairs were created by finding, for each image, the non-null action that occurred most recently following the collected image, up to a maximum of 0.05 seconds after the image, or if no non-null action occurred, a noop action was selected.  Appendix 2: Imitation Learning  Some notes on the topic.  Appendix 3: Model and training details  See here for the hyperparams used in the CNN case.  Appendix 4: N64 as an RL environment  mupen64plus seems to be the most popular N64 emulator. It is not designed for use in RL.  The design is based on a core module that has plugins for video, audio, controller input, etc. The plugins don\u0026rsquo;t communicate directly. Providing a unified interface for RL would require a significant amount of effort, with the implementation options being:  Wrap the core and all plugins in an adapter program.   And also interpret / provide access to the RAM.  Use BizHawk   Bizhawk seems to have already done option 1, and is typically used in tool-assisted SSB64 gameplay. It only seems to work on windows for now, with linux support being developed.     Alternatively, you could use gym-mupen64plus  It takes screenshots of the game and parses them to compute rewards. The main problems are:  Because the observations are from screenshots, the hardware might influence the rate of observations and their alignment with actions taken.  This is complicated to deal with, as can be seen in the dataset formatting details of this project.   gym-mupen64plus for SSB64 attempts to automatically select characters in versus mode, but that didn\u0026rsquo;t work in my case.  The implementation assumes the selector for the AI appears in the same location every time.  In my emulation of the game it was random.   Directly performing these tasks by operating on the RAM is clearly a better approach.   Parsing the screen for the reward seems to work, but breaks with small changes.  Using the RAM directly would be faster and more reliable.        Appendix 5: RNNs why use them, how to optimize and regularize them Why use an RNN?  I tried using an RNN because I was curious to what extent it would improve performance.  The reasons it might improve performance are:  A reasonable-size, fixed-frame history may not represent a Markovian representation of the environment. The inductive bias of the RNN may provide some benefits (e.g., consistency or smoothness).      Optimizing and regularizing RNNs  First, note that RNNs have gone out of fashion lately (at least in NLP).   Transformer networks are generally being preferred.  Here\u0026rsquo;s a paper that tries to explain why.   There are a lot of tricks for regularizing and optimizing RNNs.  This is a good paper on it that is somewhat recent.  It focuses on NLP, but the advice seemed to help in my case.   I implemented or copied some of the regularization methods here.   One decision to make in RNN training is whether to use \u0026ldquo;stateful\u0026rdquo; or \u0026ldquo;stateless\u0026rdquo; training.  See this description and this explanation.  The gist is that you need to use stateful (maintaining the hidden state across batches) training if you want the network to learn to maintain memory beyond the length of the BPTT.      ","date":1562976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562976000,"objectID":"50a410dda990933e711a8408000c4be3","permalink":"https://wulfebw.github.io/post/ssb64-bc/","publishdate":"2019-07-13T00:00:00Z","relpermalink":"/post/ssb64-bc/","section":"post","summary":"Write-up on Super Smash Bros. 64 AI developed using behavioral cloning.","tags":[],"title":"Super Smash Bros. 64 AI: Behavioral Cloning","type":"post"},{"authors":["Raunak P. Bhattacharyya","Derek J. Phillips","Blake Wulfe","Jeremy Morton","Alex Kuefler","Mykel J. Kochenderfer"],"categories":["rl","imitation learning"],"content":"","date":1519948800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1519948800,"objectID":"cb77ef0c194e34b93dbd42703afbda2a","permalink":"https://wulfebw.github.io/publication/multiagent-gail-driver/","publishdate":"2020-05-19T22:14:02-07:00","relpermalink":"/publication/multiagent-gail-driver/","section":"publication","summary":"One potential method for validating autonomous vehicles is to evaluate them in a simulator. For this to work, you need highly realistic models of human driving behavior. Existing research learned human driver models using generative adversarial imitation learning, but did so in a single-agent environment. As a result, the model fails when you execute many of the learned policies simultaneously. This research performs training in a multi-agent setting to address this problem.","tags":[],"title":"Multi-Agent Imitation Learning for Driving Simulation","type":"publication"},{"authors":[],"categories":["robotics"],"content":"Intro  If we want to control the robot through imitation learning, we need the ability to manually control it so as to gather data Manual control requires programmatic control, i.e., the ability to specify end-effector positions and have the robot achieve those positions through changes in joint configurations This post shows how to implement programmatic control of a simple two-link robot  Outline  Programmatic robot control  Forward kinematics Inverse kinematics    Preview  Materials  This post only uses materials from previous posts  Background Forward Kinematics  We\u0026rsquo;re focused on robotic manipulators aka robot arms, where the end of the robot arm is called the end-effector Given all the information about a robot arm (length and mass of the links, the types of joints, how those joints and links are connected, etc) and the current configuration of the joints, how can you find out where the end-effector is?   Forward kinematics answers this question    Schematic  First, draw a schematic of the robot arm, assigning frames to the different joints Figure 3 in these notes provides a schematic for a two-revolute-joint robot (called an revolute-revolute (RR) manipulator)  revolute means the joint rotates, and the other option is prismatic meaning it translates linearly along its axis Also, here\u0026rsquo;s a schematic with the frames labeled    DH Parameters  Second, derive Denavit–Hartenberg parameters  DH parameters are one convention for expressing information about robotic manipulators They make it easy to derive the transformation from each frame to the end-effector frame    Transformation Matrix  Given the DH parameters, we can derive a transformation matrix from each frame to the frame of the end-effector  First, build transformation matrices from each frame to the next Second, multiply these all together to find the transformation from the 0th frame to the end-effector frame   Section 3 of the referenced notes provides the transformation matrix for the RR manipulator Here\u0026rsquo;s the code for computing the transformation matrix given the DH parameters  Inverse Kinematics  We just looked at the forward kinematics, which tell you the position of the end-effector given the configuration of the joints What about the opposite question: given a (desired) position of the end-effector how do you figure out the joints that achieve that position? This turns out to be a more difficult problem to solve  Since the forward kinematics involve nonlinear operations (sine, cosine), typically there\u0026rsquo;s no analytical solution for the joints There can be many solutions, and there can also be no solutions We\u0026rsquo;ll look at one method for solving the problem    Jacobian  The method we\u0026rsquo;ll use requires the Jacobian The forward kinematics map from the joints config to the end-effector position  It\u0026rsquo;s a function mapping from dimension n to dimension m If you differentiate each output with respect to each input, and arrange those derivatives in a matrix, that matrix is the Jacobian   Given the transformation matrices, there\u0026rsquo;s a simple algorithm for finding the Jacobian The code implementing the algorithm and along with a description can be found here  Inverse Jacobian Method  The method we use for solving the inverse kinematics problem is called the inverse Jacobian method  It\u0026rsquo;s an iterative method that  Linearizes the function using the Jacobian Solves for the change in joint configuration that moves the end-effector closest to the target position  This is accomplished by formulating the pseudoinverse of the Jacobian, hence the name   Updates the configuration Repeats until the target is reached or it\u0026rsquo;s determined that it cannot be reached    Here\u0026rsquo;s a solid tutorial on it that steps through the logic and math  Here\u0026rsquo;s my implementation of it   This method does not explicitly deal with constraints on the movement of the manipulator  A faster solver that handles constraints will be the topic of a future post    Walkthrough Hardware  The two-link manipulator is just the connected servos from the previous post, which looks like:   Software  Download and setup the project code  git clone https://github.com/wulfebw/robotics_rl.git cd robotics_rl sudo python setup.py develop   Run the tutorial code that randomly samples an end-effector position, and then solves for a joint configuration to achieves that position  import time import rlrobo.manipulator manipulator = rlrobo.manipulator.build_RR_manipulator(l1=1,l2=2) while True: pos = manipulator.random_position() manipulator.set_end_effector_position(pos) time.sleep(1)  Result  ","date":1518480000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1518480000,"objectID":"0c083f688bb422ad5f62147855e259f5","permalink":"https://wulfebw.github.io/post/03-two-link-programmatic-control/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/03-two-link-programmatic-control/","section":"post","summary":"Controlling a robotic arm with reinforcement learning 3: two-link programmatic control","tags":[],"title":"Two Link Programmatic Control","type":"post"},{"authors":[],"categories":["robotics"],"content":"Outline  Servos will control the joints of the robotic arm. In this post, we\u0026rsquo;ll look at controlling a single servo using a HAT (hardware attached on top).  Preview  Materials  servo HAT  $22 on amazon   HAT power source  $8 on amazon   soldering kit  $20 on amazon   small test servos  $7 on amazon   total cost: $57 + cost of previous materials  cost so far: $147 + cost of common materials    Background How do servos work?  They have a motor. You send a signal to the motor, and the length of the signal indicates the desired position of the motor   Servo primer    Pulse width modulation (PWM) is used in sending the signal  PWM resources:   Adafruit description      Why do we need the servo HAT?  The pi has the ability to send PWM signals, but there are two problems  servos draw enough power that operating them can interfere with the pi operations the pi only has a single PWM pin, which means it can only control one servo   The servo HAT allows for controlling many servos at once, and also uses an external power supply to avoid interfering with the pi  Walkthrough Servo HAT hardware setup  Solder the pins into the servo HAT then attach the HAT to the pi as in the following picture  Attach the servo to the first set of 3 pins Power on the pi and servo HAT  Servo HAT software setup  Download the software library that comes with the servo HAT as described in this tutorial Add the downloaded library to PYTHONPATH in your raspberry pi bash_profile  export PYTHONPATH=\u0026quot;/home/pi/software/Adafruit-Raspberry-Pi-Python-Code/Adafruit_PWM_Servo_Driver:$PYTHONPATH\u0026quot;  where software is the directory where I downloaded the software     Since these programs are run with the super user, and running with super user erases the PYTHONPATH by default, we need to explicitly keep the PYTHONPATH when running as super user  sudo visudo -f /etc/sudoers.d/custom  this creates a custom file rather than directly editing sudoers by default this uses nano to edit the file   add Defaults env_keep += \u0026quot;PYTHONPATH\u0026quot; to the file and exit    Running the tutorial demo  Download the additional code used to control the servo  this is in the same github repo as the code from the previous tutorial it contains a utility function that allows for controlling the servo based on the desired angle of the servo arm rather than with pulse widths   Run the tutorial demo  sudo python 2_single_servo.py    Result  ","date":1518134400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1518134400,"objectID":"4752fd4e30a87d1d42e78bf7eed059ae","permalink":"https://wulfebw.github.io/post/02-single-servo-control/","publishdate":"2018-02-09T00:00:00Z","relpermalink":"/post/02-single-servo-control/","section":"post","summary":"Controlling a robotic arm with reinforcement learning 2: single servo control","tags":[],"title":"Single Servo Control","type":"post"},{"authors":["Blake Wulfe","Sunil Chintakindi","Sou-Cheng T. Choi","Rory Hartong-Redden","Anuradha Kodali","Mykel J. Kochenderfer"],"categories":["policy evaluation","mdp","risk prediction","autonomous driving"],"content":"","date":1517788800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517788800,"objectID":"a4c178a6b00d0af023fdd97da30681df","permalink":"https://wulfebw.github.io/publication/risk-prediction/","publishdate":"2020-05-19T22:05:06-07:00","relpermalink":"/publication/risk-prediction/","section":"publication","summary":"This research considers the problem of predicting whether a car will suffer a collision in the time period 10-20 seconds in the future. We formulate this task as policy evaluation in a MDP with a high-dimensional, continuous state space, and a reward function dominated by rare events (collisions). We then demonstrate that simulated data and domain adaptation models can be used to improve prediction performance on real-world data.","tags":[],"title":"Intermediate-Horizon Automotive Risk Prediction","type":"publication"},{"authors":[],"categories":["robotics"],"content":"Outline  We\u0026rsquo;ll make a LED blink in this post. Gotta start somewhere.  Preview  Materials  Raspberry Pi  For example through CanaKit $70 on amazon   electric cables  $7 on amazon There are probably cheaper options   electronics start kit  $13 on amazon There are definitely cheaper options For this tutorial, we\u0026rsquo;re just using an LED, a 1k resistor, and a breadboard   commonly available materials  keyboard mouse monitor hdmi-to-hdmi cable to connect raspberry pi to monitor   total cost: $90 + cost of common materials  Walkthrough  set up the raspberry pi  see canakit instructions   set up raspberry pi wifi connection and ssh  connect pi to monitor, mouse, keyboard follow these instructions to set up ssh  hostname -I to get ip address ssh pi@\u0026lt;ip address\u0026gt;  from your other computer   default password is raspberry     set up raspberry pi with LED  see Raspberry Pi Cookbook instructions tutorial download my version of the code  run sudo python 1_led.py from cmd line      Result  ","date":1517702400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517702400,"objectID":"9ffab9a684df7f4c4066168c744691e5","permalink":"https://wulfebw.github.io/post/01-led-control/","publishdate":"2018-02-04T00:00:00Z","relpermalink":"/post/01-led-control/","section":"post","summary":"Controlling a robotic arm with reinforcement learning 1: led control","tags":[],"title":"LED Control","type":"post"},{"authors":[],"categories":["robotics"],"content":"Outline  This project consists of building a robotic arm with visual perception, and learning to control it through reinforcement and imitation learning Here\u0026rsquo;s the breakdown of the task:    LED control  Single-servo control  Two-link programmatic control Two-link manual control Two-link imitation control Perception Two-link RL control Building the robotic arm Robotic arm programmatic control Robotic arm manual control Robotic arm imitation control Robotic arm RL control Robotic arm sim2real RL control  What is this?  this is an outline for a project the project is to build a robotic arm and control it via reinforcement and imitation learning  Why am I doing this project?  RL and stochastic dynamic programming have been successful in performing a number of tasks like game playing and robotics Most RL (human) learning resources focus on implementing algorithms and applying them in simulation Real-world robotics is a key application area of reinforcement learning because it is a case where RL is very likely the best option for learning control policies The goal of this project is to demonstrate the application of RL in a robotics task  In a manner that people could do by themselves at reasonable cost without external resources like a robotics lab    ","date":1517616000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517616000,"objectID":"f1337a828c67fa01a52dbd4a09588b58","permalink":"https://wulfebw.github.io/post/00-robotics-intro/","publishdate":"2018-02-03T00:00:00Z","relpermalink":"/post/00-robotics-intro/","section":"post","summary":"Controlling a robotic arm with reinforcement learning: outline","tags":[],"title":"Robotics Intro","type":"post"},{"authors":[],"categories":["rl"],"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"8a5184aa93d0936d3bbbb2a82790e09a","permalink":"https://wulfebw.github.io/project/uav-drl/","publishdate":"2018-01-01T00:00:00Z","relpermalink":"/project/uav-drl/","section":"project","summary":"We learn UAV collision avoidance policies directly from a simulator with a Deep Q-Network (DQN). This approach not only solves for policies more quickly than value iteration, but also arrives at safer and more efficient solutions by learning a direct mapping from the state space instead of discretizing it.","tags":[],"title":"Deep Reinforcement Learning for Collision Avoidance","type":"project"},{"authors":[],"categories":[],"content":"","date":1495152000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495152000,"objectID":"2ca73891c75b8c64de561256b92817e2","permalink":"https://wulfebw.github.io/project/atari-hierarchical-drl/","publishdate":"2017-05-19T00:00:00Z","relpermalink":"/project/atari-hierarchical-drl/","section":"project","summary":"How can artificial agents autonomously learn increasingly complex behavior? The traditional approach to solving this problem is to identify subgoals, and then to learn options (i.e., skills) useful for achieving those subgoals. In this research, we instead take a bottom-up approach to HRL, wherein the sequential, primitive actions of an agent are modeled as the result of latent variables, which may themselves be used as options (similar in concept to the approach taken here). This research makes an initial step in this direction, using hierarchical recurrent neural networks within a Recurrent Q-Network.","tags":[],"title":"Playing Atari with Hierarchical Deep Reinforcement Learning","type":"project"},{"authors":[],"categories":["rl","dqn"],"content":" update: see rainbow sanity check the implementation  come up with a simple dataset and see if the DQN can correctly learn values for it an example is a contextual bandit problem where you have two possible states, and two actions, where one action is +1 and the other -1 generally, an rl method should work on 1-step and 2-step mdps both with and without random rewards and transitions   updating the target network  check freeze rate this should be between every 100 updates and every 40000   batch size  this can be hard to set and depends on CPU vs GPU as well as the state dimensionality start with 32 and increase the goal should be to have each experience replayed some number of times on average  this is determined by the size of the replay memory and batch size     replay memory  replay memory size 1,000 to 10,000,000   action selection  softmax vs e-greedy  softmax typically works better if the temperature is tuned well     learning rate  try values between 0.01 and 0.00001 generally   state sampling  only relevant when initial-state distribution can be controlled if the important rewards are common then uniform sampling of the initial state might work if the important reward is rare then you\u0026rsquo;ll need to oversample these states  to do this in a principled manner, you need to know the relative probability of sampling states in the original MDP versus the proposal MDP (i.e., you need to do importance sampling)   prioritized sampling can also help if you are dealing with rare, significant rewards   normalizing input  mean center and normalize to get the stats, if it\u0026rsquo;s stationary, run it for 100,000 samples and compute mean and std dev or if the range of the input is available then you can use that  subtract the average of the end points divide by half the total range     max episode length  when ending an episode not at a terminal state, be careful not to label that as a terminal state this value will impact the distribution over the state space   terminal states  you need to handle this so that the target value is zero if it\u0026rsquo;s terminal   discount  \u0026lt; 1 unless finite horizon in which case \u0026lt;= 1   initializing the network weights  this is consistently surprisingly important see http://cs231n.github.io/neural-networks-2/ (Weight Initialization)   action space  if this is large then it can make learning slow if this really should be continuous, then consider policy gradient methods   regularization / dropout  many papers don\u0026rsquo;t report using regularization or dropout empirically it can help in certain situations  for example when the training MDP is different from the testing MDP and you need the policy to generalize start with small values for l2 reg (0.00001) dropout can vary dramatically in effectiveness (dropout ratio of 0.01 to 0.5)     network hyperparams  number of layers  start small (2) and increase as needed   number of units  start small (32) and increase as needed   nonlinearity  start with relu or tanh maxout, elu, etc for getting extra benefit common pitfall: applying a nonlinearity to the last output of the network  this should just be a affine layer (dot(x,W) + b) in the relu case, applying it to the last layer makes all the output positive, which will break it       optimizer  start with adam or rmsprop then check out (http://cs231n.github.io/neural-networks-3/)   rewards  you can clip them between -1 and +1, but you lose a lot of information if you have to use certain reward values larger than that, it can help to normalize them to be between -1 and +1 if you have control over the rewards, then consider using reward shaping if the rewards are too large, then you can end up with e.g., relus dying   dqn variations  double dqn works a lot better, particularly if the rewards are negative  this is particularly easy to implement, so it\u0026rsquo;s generally worth a shot (https://arxiv.org/abs/1509.06461)   dueling network can be better  (https://arxiv.org/abs/1509.06461)     replay memory variations  prioritized replay  oversamples certain experiences based on td-error and uses importance sampling in the loss to maintain unbiased state distribution helps a lot with sparse rewards (https://arxiv.org/abs/1511.05952)      ","date":1492214400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1518134400,"objectID":"6d0f555c3631c5e6f9ea072b9366a402","permalink":"https://wulfebw.github.io/post/dqn/","publishdate":"2017-04-15T00:00:00Z","relpermalink":"/post/dqn/","section":"post","summary":"Tips and heuristics for training Deep Q-Networks","tags":[],"title":"DQN Tips","type":"post"},{"authors":["Rachael E Tompa","Blake Wulfe","Michael P Owen","Mykel J Kochenderfer"],"categories":["planning"],"content":"","date":1474761600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1474761600,"objectID":"641a8bc3f3d0b9e36fb56e07f56685de","permalink":"https://wulfebw.github.io/publication/uav-coordination/","publishdate":"2020-05-19T22:29:31-07:00","relpermalink":"/publication/uav-coordination/","section":"publication","summary":"How can UAVs with different collision avoidance strategies coordinate maneuvers so as to minimize collisions? This research presents an approach that enforces reasonable requirements on the behavior of UAVs, and as a result dramatically improves safety in dangerous encounters. The method is essentially to ensure that UAV maneuvers align with the directions of those advised by an optimal joint solution.","tags":[],"title":"Collision Avoidance for Unmanned Aircraft Using Coordination Tables","type":"publication"},{"authors":[],"categories":[],"content":"","date":1463616000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1463616000,"objectID":"9f88ef757bcb67edf63e4e10ef3e89f5","permalink":"https://wulfebw.github.io/project/atari-rl/","publishdate":"2016-05-19T00:00:00Z","relpermalink":"/project/atari-rl/","section":"project","summary":"This project compared the performance of traditional RL methods (Q-learning and SARSA with basis functions and eligibility traces) to DQN.","tags":[],"title":"Comparison of Deep and Traditional Reinforcement Learning Methods for Playing Atari","type":"project"},{"authors":[],"categories":[],"content":"","date":1463616000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1463616000,"objectID":"8d22422d65d4e96eb9972cc33b33ba0b","permalink":"https://wulfebw.github.io/project/language-modeling-gans/","publishdate":"2016-05-19T00:00:00Z","relpermalink":"/project/language-modeling-gans/","section":"project","summary":"GANs have had a lot of success in generating images; can they be applied with similar effect to natural language? Since natural language is discrete, we formulate this task as a reinforcement learning problem, and use REINFORCE to train a recurrent generative network to maximize rewards produced by a discriminating network. We found this approach did not scale well to the vocab sizes used in realistic datasets ( 60,000 words), but believe improved training methods (e.g., TRPO) and curriculum learning (e.g., MIXER) might overcome these issues.","tags":[],"title":"Language Modeling with Recurrent Generative Adversarial Networks","type":"project"},{"authors":[],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"630f3da70fb445be945cdf2b9cca1849","permalink":"https://wulfebw.github.io/project/geolocalization/","publishdate":"2016-01-01T00:00:00Z","relpermalink":"/project/geolocalization/","section":"project","summary":"Given a random, street-level image of a city from around the world, could you identify where the picture was taken? In this project, we collected a dataset of 100,000 images from ten cities, and trained a convolutional neural network to predict the city from the image. We found that the network successfully identifies the city with ~75% accuracy. Research tackling this project at a much larger scale was published concurrently (PlaNet)","tags":[],"title":"Geo-localization of Street View Images","type":"project"},{"authors":[],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"fc0595adee2893ba8061c9baf0284f03","permalink":"https://wulfebw.github.io/project/social/","publishdate":"2014-01-01T00:00:00Z","relpermalink":"/project/social/","section":"project","summary":"In this project, I analyzed a set of ~2,000 pairwise social encounters. Using the audio, visual, and network features from those interactions, I was able to predict their outcomes with about 85% accuracy. While I am more focused on reinforcement learning now, I still think this topic is interesting, and in particular believe that enabling computers to intelligently interact with people (e.g., in healthcare or educational settings) would be widely beneficial.","tags":[],"title":"Predicting Social Interaction Outcomes","type":"project"}]